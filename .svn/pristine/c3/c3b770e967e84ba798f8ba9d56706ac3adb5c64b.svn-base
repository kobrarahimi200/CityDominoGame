package GUI;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.input.ClipboardContent;
import javafx.scene.SnapshotParameters;
import javafx.scene.control.MenuItem;
import javafx.scene.input.Dragboard;
import javafx.scene.input.DragEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.input.TransferMode;
import javafx.scene.control.TabPane;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import logic.GUIToGame;
import logic.Position;

/**
 * here is defined some functionality for event listener or mouse events for
 * some buttons , pane and fields. This class has main role in gui representation.
 *
 * @author kobra
 */
public class FXMLDocumentController implements Initializable {

    @FXML
    private GridPane grdHuman;
    @FXML
    private GridPane grdA1;
    @FXML
    private GridPane grdA2;
    @FXML
    private GridPane grdA3;
    private TabPane tabGeneral;
    //private JavaFXGUI gui;
    private final Image TOWN_HALL = new Image("GUI/img/CityHall_Empty.png");
   
    ImageView[][] imgSelect3;
    @FXML
    private Button btnRotate;
    @FXML
    private Button btnSkip;
    @FXML
    private Pane pnSelected;

    private GUIToGame game;
    @FXML
    private GridPane grdNextBox;
    @FXML
    private GridPane grdCurrtBox;
    private JavaFXGUI gui;
    @FXML
    private Pane paneH;
    @FXML
    private Pane paneA1;
    @FXML
    private Pane paneA2;
    @FXML
    private Pane paneA3;
    @FXML
    private Button btn0;
    @FXML
    private Button btn1;
    @FXML
    private Button btn2;
    @FXML
    private Button btn3;
    @FXML
    private BorderPane brdPane;
    @FXML
    private MenuItem load;
    @FXML
    private AnchorPane anPaneLeft;
    @FXML
    private VBox vboxLeft;
    @FXML
    private VBox vboxRight;
    @FXML
    private Button btnRight;
    @FXML
    private Button btnLeft;
    @FXML
    private Button btnDown;
    @FXML
    private Button btnUp;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        ImageView[][] imgViewH = addImagesToGrid(grdHuman);
        ImageView[][] imgViewA1 = addImagesToGrid(grdA1);
        ImageView[][] imgViewA2 = addImagesToGrid(grdA2);
        ImageView[][] imgViewA3 = addImagesToGrid(grdA3);
        ImageView[][] imgCurrentBox = addImagesToGrid(grdCurrtBox);
        //ImageView[][] imgVwsGame = addImagesToGrid(grdPnGame);
        this.addDragAndDropHandlers(imgViewH);
        this.grdHuman.prefHeightProperty().bind(paneH.heightProperty());
        this.grdHuman.prefWidthProperty().bind(paneH.widthProperty());
        this.grdA1.prefHeightProperty().bind(paneA1.heightProperty());
        this.grdA2.prefHeightProperty().bind(paneA2.heightProperty());
        this.grdA3.prefHeightProperty().bind(paneA3.heightProperty());
        getImgDirection();
        gui = new JavaFXGUI(pnSelected, imgViewH, imgViewA1, imgViewA2, imgViewA3, addImagesToGrid(grdNextBox), imgCurrentBox,
        btn0, btn1,btn2,btn3);
        this.game = new logic.Game(gui, 5, 5, 1, 3);

    }
    private void getImgDirection(){
       ImageView imgViewUp = new ImageView();
       imgViewUp.setImage(new Image("GUI/img/up.png"));
       btnUp.setGraphic(imgViewUp);
       imgViewUp.fitWidthProperty().bind(btnUp.widthProperty());
       imgViewUp.fitHeightProperty().bind(btnUp.heightProperty());
       // down direction
       ImageView imgViewDown = new ImageView();
       imgViewDown.setImage(new Image("GUI/img/down.png"));
       btnDown.setGraphic(imgViewDown);
       imgViewDown.fitWidthProperty().bind(btnDown.widthProperty());
       imgViewDown.fitHeightProperty().bind(btnDown.heightProperty());
       // left direction
       ImageView imgViewleft = new ImageView();
       imgViewleft.setImage(new Image("GUI/img/left.png"));
       btnLeft.setGraphic(imgViewleft);
       imgViewleft.fitWidthProperty().bind(btnLeft.widthProperty());
       imgViewleft.fitHeightProperty().bind(btnLeft.heightProperty());
       //right 
       ImageView imgViewright = new ImageView();
       imgViewright.setImage(new Image("GUI/img/right.png"));
       btnRight.setGraphic(imgViewright);
       imgViewright.fitWidthProperty().bind(btnRight.widthProperty());
       imgViewright.fitHeightProperty().bind(btnRight.heightProperty());
       //discard 
       ImageView imgViewSkip = new ImageView();
       imgViewSkip.setImage(new Image("GUI/img/delete.png"));
       btnSkip.setGraphic(imgViewSkip);
       imgViewSkip.fitWidthProperty().bind(btnSkip.widthProperty());
       imgViewSkip.fitHeightProperty().bind(btnSkip.heightProperty());
       //rotate button sign 
       ImageView imgViewrotate = new ImageView();
       imgViewrotate.setImage(new Image("GUI/img/rotate.png"));
       btnRotate.setGraphic(imgViewrotate);
       imgViewrotate.fitWidthProperty().bind(btnRotate.widthProperty());
       imgViewrotate.fitHeightProperty().bind(btnRotate.heightProperty());
       
    }
    /**
     * creates an array of imageviews corresponding to the gridPane. Each
     * imageView becomes a child of the gridPane and fills a cell. For proper
     * resizing it is binded to the gridPanes width and height. (getting help
     * form last semester assignment)
     *
     * @return an array of imageviews added to the gridPane
     */
    private ImageView[][] addImagesToGrid(GridPane grid) {

        int colcount = grid.getColumnConstraints().size();
        int rowcount = grid.getRowConstraints().size();
        ImageView[][] imgVwsGame = new ImageView[colcount][rowcount];
        for (int x = 0; x < colcount; x++) {
            for (int y = 0; y < rowcount; y++) {
                //creates an imageview with the empty image (for some reasons there needs to an image there for the drag and drop to work
                imgVwsGame[x][y] = new ImageView(JavaFXGUI.EMPTY_IMG);
                grid.add(imgVwsGame[x][y], x, y);
                imgVwsGame[x][y].fitWidthProperty().bind(grid.widthProperty().divide(colcount).subtract(grid.getHgap()));
                imgVwsGame[x][y].fitHeightProperty().bind(grid.heightProperty().divide(rowcount).subtract(grid.getVgap()));
            }
        }
        return imgVwsGame;
    }

    /**
     * put the city hall image in the middle of the grid
     *
     * @param grid is the given gridpane
     */

    @FXML
    private void onClickBtnStart(ActionEvent event) { 
        game.startGame();
    }

    @FXML
    private void onClickPnSelected(MouseEvent event) {
        game.boxClicked();
    }

    @FXML
    private void onClickNextBox(MouseEvent event) {//from last semester
        int x = -1;
        int y = -1;
        boolean leftClicked = event.getButton() == MouseButton.PRIMARY;
        boolean rightClicked = event.getButton() == MouseButton.SECONDARY;

        for (Node node : grdNextBox.getChildren()) {
            if (node instanceof ImageView) {
                if (node.getBoundsInParent().contains(event.getX(), event.getY())) {
                    //to use following methods the columnIndex and rowIndex
                    //must have been set when adding the imageview to the grid
                    x = GridPane.getColumnIndex(node);
                    y = GridPane.getRowIndex(node);
                }
            }
        }

        if (x >= 0 && y >= 0 && leftClicked) {
            
            this.game.clickOnNextBox(y);
        }

    }
    
    /**
     * this method is first initialization of dragging image inside the grid
     * pane(according to java Doc is written)
     *
     * @param event
     */
    @FXML
    private void onDragDetectedSelect3(MouseEvent event) {
        /* drag was detected, start a drag-and-drop gesture*/
        /* allow any transfer mode */
        Dragboard db = this.pnSelected.startDragAndDrop(TransferMode.MOVE);//moving the image
        ClipboardContent content = new ClipboardContent();

        content.putString("");
        db.setContent(content);

        db.setDragView(this.pnSelected.snapshot(new SnapshotParameters(), null), 10, 10);
        event.consume();
    }

    /**
     * adding the image to the given image view through drag event
     * (from last semester)
     * @param target is the given image view
     */
    private void addDragAndDropHandlers(ImageView[][] imgVws) {
        for (int x = 0; x < imgVws.length; x++) {
            for (int y = 0; y < imgVws[x].length; y++) {
                final int fx = x;
                final int fy = y;
                imgVws[x][y].setOnDragOver((EventHandler<DragEvent>) (DragEvent event) -> {
                    if (event.getGestureSource() == pnSelected) {
                        event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
                    }
                    event.consume();
                });
                imgVws[x][y].setOnDragEntered((EventHandler<DragEvent>) (DragEvent event) -> {
                    Position pos = new Position(fx, fy);
                    if (this.game.fits(pos) && gui.isValidPosGrid(pos)) {
                        System.out.println("highlight is working");
                        this.gui.highlightDominoPosGreen(pos);
                    } else {
                        this.gui.highlightDominoPosRed(pos);
                    }
                    event.consume();
                });
                imgVws[x][y].setOnDragExited((EventHandler<DragEvent>) (DragEvent event) -> {
                    this.gui.removeHighlightDominoPos(new Position(fx, fy));
                    event.consume();
                });
                imgVws[x][y].setOnDragDropped((EventHandler<DragEvent>) (DragEvent event) -> {
                    boolean success = false;
                    Position pos = new Position(fx, fy);
                    System.out.println(pos.x() + "gui drag"+ pos.y());
                    if (this.game.fits(pos)) {
                        success = true;
                        this.gui.removeHighlightDominoPos(pos);
                        this.game.setOnBoard(pos);
                    }
                    event.setDropCompleted(success);
                    event.consume();
                });
            }
        }
    }

    @FXML
    private void onClickSaveBtn(ActionEvent event) {
        this.game.save();
    }
    
    @FXML
    private void onClickSkipBtn(MouseEvent event) {
        this.game.moveToDiscards();
    }
    
    @FXML
    private void moveUpCC(MouseEvent event) {
        this.game.moveUpCityCenter();
    }
    
     @FXML
    private void moveDownCC(MouseEvent event) {
        this.game.moveDownCityCenter();  
    }
    
    @FXML
    private void moveLeftCC(MouseEvent event) {
        this.game.moveLeftCityCenter();    
    }
    
    @FXML
    private void moverightCC(MouseEvent event) {
        this.game.moveRightCityCenter(); 
    }
    
    @FXML
    private void load(ActionEvent event) {
        this.game = this.game.load(this.game);
    }
}
